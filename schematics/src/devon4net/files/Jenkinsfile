pipeline{
    agent any

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '1', artifactNumToKeepStr: '1', daysToKeepStr: '5', numToKeepStr: '50'))
        // Disable concurrent builds. It will wait until the pipeline finish before start a new one
        disableConcurrentBuilds()<% if (teams) { %>
        office365ConnectorWebhooks([[name: '<%= teamsname %>', notifyAborted: true, notifyBackToNormal: true, notifyFailure: true, notifySuccess: true, notifyUnstable: true, url: '<%= teamsurl %>']])<% } %>
    }

    <% if (openshift) { %>
    tools {
        oc "OpenShiftv3.11.0"
    }
    <% } %>

    environment {
        appName = '<%= appname %>'
        appVersion = '<%= appversion %>'

        // Script for build the application. Defined at package.json
        buildScript = 'build'
        // Script for lint the application. Defined at package.json
        lintScript = 'lint'
        // Script for test the application. Defined at package.json
        testScript = 'test:ci'
        // SRC folder.
        srcDir = 'src'
        // dotnet custom tool name
        dotnet = 'dotnet'
        // WebAPI folder
        webApiFolder = 'Devon4Net.Application.WebAPI'

        // sonarQube
        // Name of the sonarQube tool
        sonarTool = 'SonarQube'
        // Name of the sonarQube environment
        sonarEnv = "SonarQube"

        // Nexus
        // Artifact groupId
        groupId = '<%= groupid %>'
        // Nexus repository ID
        repositoryId = 'pl-nexus'
        // Nexus internal URL
        repositoryUrl = 'http://nexus3-core:8081/nexus3/repository/'
        // Maven global settings configuration ID
        globalSettingsId = 'MavenSettings'
        // Maven tool id
        mavenInstallation = 'Maven3'

        <% if (docker || openshift) { %>
        // Docker
        dockerFileName = 'Dockerfile.ci'
        dockerRegistry = '<%= registryurl %>'
        dockerRegistryCredentials = 'nexus-api'
        <% } %>
        <% if (docker) { %>
        dockerDaemonUrl = '<%= dockerurl %>'
        dockerCertificateId = '<%= dockercertid %>'
        dockerRegistryProtocol = 'https://'
        containerName = 'angular_application'
        dockerTool = 'docker-global'
        <% } %>

        <% if (openshift) { %>
        // Openshift
        openshiftClusterName = '<%= ocname %>'
        timeToCheckApp = 5
        <% } %>
    }

    stages {
        stage ('Loading Custom Tools') {
            when {
               anyOf {
                   branch 'master'
                   branch 'develop'
                   branch 'release/*'
                   branch 'feature/*'
                   branch 'hotfix/*'
                   changeRequest()
               }
            }
            steps {
                tool dotnet
                <% if (docker) { %>
                tool dockerTool
                <% } %>

                script {
                    if (env.BRANCH_NAME.startsWith('release')) {
                        dockerTag = "release"
                        repositoryName = "maven-releases"
                        deployEnvironment = "-uat"
                        sonarProjectKey = "-release"
                    }

                    if (env.BRANCH_NAME == 'develop') {
                        dockerTag = "latest"
                        repositoryName = "maven-snapshots"
                        deployEnvironment = "-dev"
                        sonarProjectKey = "-develop"
                    }

                    if (env.BRANCH_NAME == 'master') {
                        dockerTag = "production"
                        repositoryName = "maven-releases"
                        deployEnvironment = "-stage"
                        sonarProjectKey = ""
                        
                    }
                }
            }
        }

        stage ('Fresh Dependency Installation') {
            when {
                anyOf {
                    branch 'master'
                    branch 'develop'
                    branch 'release/*'
                    branch 'feature/*'
                    branch 'hotfix/*'
                    changeRequest()
                }
            }
            steps {
                dir(webApiFolder){
                    sh "dotnet restore"
                }
            }
        }

        stage ('Execute dotnet tests') {
            when {
                anyOf {
                    branch 'master'
                    branch 'develop'
                    branch 'release/*'
                    branch 'feature/*'
                    branch 'hotfix/*'
                    changeRequest()
                }
            }
            steps {
                dir(webApiFolder){
                    sh "dotnet test"
                }
            }
        }

        stage ('SonarQube code analysis') {
            when {
                anyOf {
                    branch 'master'
                    branch 'develop'
                    branch 'release/*'
                }
            }
            steps {
                script {
                    def scannerHome = tool sonarTool
                    withSonarQubeEnv(sonarEnv) {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=${appName}${sonarProjectKey} \
                                -Dsonar.projectName=${appName}${sonarProjectKey} \
                                -Dsonar.projectVersion=${appVersion} \
                                -Dsonar.sources=.
                        """
                    }
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage ('Build Application') {
            when {
                anyOf {
                    branch 'master'
                    branch 'develop'
                    branch 'release/*'
                    branch 'feature/*'
                    branch 'hotfix/*'
                    changeRequest()
                }
            }
            steps {
                dir(webApiFolder){
                    sh """
                        dotnet publish -r linux-x64 -c Release -o out --self-contained<% if (docker || openshift) { %>
                        cp ../${dockerFileName} out/Dockerfile
                        cp ../.dockerignore out/.dockerignore<% } %>
                    """
                }
            }
        }

        stage ('Deliver application into Nexus') {
            when {
                anyOf {
                    branch 'master'
                    branch 'develop'
                    branch 'release/*'
                }
            }
            steps {
                script {
                    dir(webApiFolder){
                        zip dir: 'out/', zipFile: """${appName}.zip"""
                        version = appVersion
                        if (!version.endsWith("-SNAPSHOT") && env.BRANCH_NAME == 'develop') {
                            version = "${version}-SNAPSHOT"
                            version = version.replace("-RC", "")
                        }

                        if (!version.endsWith("-RC") && env.BRANCH_NAME.startsWith('release')) {
                            version = "${version}-RC"
                            version = version.replace("-SNAPSHOT", "")
                        }

                        if (env.BRANCH_NAME == 'master' && (version.endsWith("-RC") || version.endsWith("-SNAPSHOT"))){
                            version = version.replace("-RC", "")
                            version = version.replace("-SNAPSHOT", "")
                        }

                        withMaven(globalMavenSettingsConfig: globalSettingsId, maven: mavenInstallation) {
                            sh """
                                mvn deploy:deploy-file \
                                    -DgroupId=${groupId} \
                                    -DartifactId=${appName} \
                                    -Dversion=${version} \
                                    -Dpackaging=zip \
                                    -Dfile=${appName}.zip \
                                    -DrepositoryId=${repositoryId} \
                                    -Durl=${repositoryUrl}${repositoryName}
                            """
                        }
                    }
                }
            }
        }
        
        <% if (docker) { %>
        stage ('Create the Docker image') {
            when {
                anyOf {
                    branch 'master'
                    branch 'develop'
                    branch 'release/*'
                }
            }
            steps {
                script {
                    dir("${webApiFolder}/out") {
                        docker.withServer(dockerDaemonUrl<% if(dockercertid){ %>, dockerCertificateId <%}%>) {
                            docker.withRegistry("""${dockerRegistryProtocol}${dockerRegistry}""", dockerRegistryCredentials) {
                                def customImage = docker.build("${appName}:${appVersion}")
                                customImage.push()
                                customImage.push(dockerTag);
                            }
                        }
                    }
                }
            }
        }

        stage ('Deploy the new image') {
            when {
                anyOf {
                    branch 'master'
                    branch 'develop'
                    branch 'release/*'
                }
            }
            steps{
                script {
                    docker.withServer(dockerDaemonUrl<% if(dockercertid){ %>, dockerCertificateId <%}%>) {
                        docker.withRegistry("""${dockerRegistryProtocol}${dockerRegistry}""", dockerRegistryCredentials) {
                            
                            // Create the docker network
                            def dockerNetworkName = appName.split('-')[0].trim()
                            def network = sh returnStdout: true, script: """docker network ls -f name="^${dockerNetworkName}${deployEnvironment}\$" | sed '2q;d' """
                            if (network?.trim() == '') {
                                sh "docker network create ${dockerNetworkName}${deployEnvironment}"
                            } else {
                                println "${dockerNetworkName}${deployEnvironment} network already exists"
                            }
                            // Deploy the docker container
                            docker.image("${dockerRegistry}/${appName}:${dockerTag}").pull()

                            def containerId = sh returnStdout: true, script: """docker ps -aqf network=${dockerNetworkName}${deployEnvironment} -f "ancestor=${dockerRegistry}/${appName}:${dockerTag}" """
                            if (containerId?.trim()) {
                                sh "docker rm -f ${containerId.trim()}"
                            }

                            println """docker run -d --restart unless-stopped --network=${dockerNetworkName}${deployEnvironment} --network-alias=${containerName} ${dockerRegistry}/${appName}:${dockerTag}"""
                            sh """docker run -d --restart unless-stopped --network=${dockerNetworkName}${deployEnvironment} --network-alias=${containerName} ${dockerRegistry}/${appName}:${dockerTag}"""
                        }
                    }
                }
            }
        }

        // TODO: Check container status stage

        <% } %>

        <% if (openshift) { %>
        stage ('Create the Docker image') {
            when {
                anyOf {
                    branch 'master'
                    branch 'develop'
                    branch 'release/*'

                }
            }
            steps {
                script {
                    def appName = "${appName}${deployEnvironment}"
                    dir(webApiFolder) {
                        openshift.withCluster(openshiftClusterName){
                            openshift.withProject() {
                                try {
                                    openshift.startBuild("${appName} --from-dir=out --wait") 
                                } catch (e) {
                                    def latestBuildVersion = openshift.selector('bc',"${appName}").object().status.lastVersion
                                    def buildName = "${appName}-${latestBuildVersion}"

                                    echo "Checking ${buildName} build"
                                    def build
                                    def status
                                    try {
                                        build = openshift.selector("build ${buildName}")
                                        status = build.object().status.phase
                                    }catch (eLog) {
                                        error ("[ERROR] - build or status not exist.\n" + e)
                                    }

                                    try {
                                        sh "echo logs for ${build.name()}:"
                                        build.logs()
                                    } catch (eLog) {
                                        sh "echo error reading logs"
                                    }

                                    if (!status) {
                                        error ("" + e)
                                    } else if (status == "Failed") {
                                        error("[FAILED] - The build is not complete, status: " + status + ".\n" + e)
                                    } else if (status) {
                                        error("[TIMEOUT] - The build is not complete, status: " + status + ".\n" + e)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        stage ('Deploy the new image') {
            when {
                anyOf {
                    branch 'master'
                    branch 'develop'
                    branch 'release/*'
                }
            }
            steps{
                script {
                    openshift.withCluster(openshiftClusterName){
                        openshift.withProject() {
                            openshift.raw("import-image ${appName}${deployEnvironment}:${dockerTag}")
                        }
                    }
                }
            }
        }
        
        stage ('Check pod status') {
            when {
                anyOf {
                    branch 'master'
                    branch 'develop'
                    branch 'release/*'
                }
            }
            steps{
                script {
                    def appName = "${appName}${deployEnvironment}"
                    openshift.withCluster(openshiftClusterName){
                        openshift.withProject() {
                            def latestDeploymentVersion = openshift.selector('dc',"${appName}").object().status.latestVersion
                            def deployment = "${appName}-${latestDeploymentVersion}"

                            echo "Checking ${deployment} pod"
                            def pod = openshift.selector('pod', [deployment: "${deployment}"])
                            def status
                            try {
                                timeout(5) {
                                    pod.untilEach(1) {
                                        status = it.object().status.phase
                                        echo "status of pod: ${status}"
                                        return (status == "Running" || status == "Failed" || status == "Error" || status == "CrashLoopBackOff")
                                    }
                                }
                                if (status != "Running") {
                                    error("")
                                }
                                status = ''
                                try {
                                    timeout(timeToCheckApp) {
                                        pod.untilEach(1) {
                                            getPod = openshift.raw("get ${it.name()}")
                                            sh """echo "${getPod.actions[0].out}" > out"""
                                            status = sh (
                                                script: "sed 's/[\t ][\t ]*/ /g' < out | sed '2q;d' | cut -d' ' -f3",
                                                returnStdout: true
                                            ).trim()
                                            return (status == "Failed" || status == "Error" || status == "CrashLoopBackOff")
                                        }
                                    }
                                    error("")
                                } catch (checked) {
                                    if (status == "Running") {
                                        sh "echo Checked: pod running during ${timeToCheckApp} minutes."
                                    } else {
                                        error("")
                                    }
                                }
                            } catch (e) {
                                try {
                                    sh "echo logs for ${pod.name()}:"
                                    pod.logs()
                                } catch (eLog) {
                                    sh "echo error reading logs"
                                }
                                if (!status) {
                                    error ("" + e)
                                } else if (status == "Failed" || status == "Error" || status == "CrashLoopBackOff") {
                                    error("[FAILED] - The pod is not running, status: " + status + ".\n" + e)
                                } else {
                                    error("[TIMEOUT] - The pod is not running, status: " + status + ".\n" + e)
                                }
                            }
                        }
                    }
                }
            }
        }
        <% } %>
    }

    post {
        cleanup {
            cleanWs()
        }
    }
}
