:toc: macro

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

toc::[]
:idprefix:
:idseparator: -
:reproducible:
:source-highlighter: rouge
:listing-caption: Listing

== Devon4ng generated files

When you execute the generate devon4ng command, some files will be added/updated in your project. 

=== Files

* angular.json
+
The angular.json is modified in order to change the compiled files destination folder. Now, when you make a build of your project, the compiled files will be generated into dist folder instead of dist/<project-name> folder.
* package.json
+
The package.json is modified in order to add a script for test the application using Chrome Headless instead of a regular chrome. This script is called `test:ci`.
* karma.conf.js
+
The karma.conf.js is also modified in order to add the Chrome Headless as a browser to execute test. The coverage output folder is change to `./coverage` instead of `./coverage/<project-name>`
* Jenkinsfile
+
The Jenkinsfile is the file which define the Jenkins pipeline of our project. With this we can execute the test, build the application and deploy it automatically following a CICD methodology. This file is prepared to work with the Production Line default values, but it is also fully configurable to your needs.
+
** Prerequisites
*** A Production Line instance. It can works also if you have a Jenkins, SonarQube and Nexus3, but in this case maybe you need to configure them properly.
*** NodeJS installed in Jenkins as a global tool.
*** Google Chrome installed in Jenkins as a global custom tool.
*** SonarQube installed in Jenkins as a global tool.
*** Maven3 installed in Jenkins as a global tool.
*** A maven global settings properly configured in Jenkins.
*** If you will use docker for deploy:
**** Docker installed in Jenkins as a global custom tool.
**** The Nexus3 with a docker repository.
**** A machine with docker installed where the build and deploy will happen.
**** A docker network called application.
*** If you will use OpenShift for deploy:
**** An OpenShift instance
**** The OpenShift projects created
** The Jenkins syntax
+ 
In this section we will  explain a little bit the syntax of the Jenkins, so if you need to change something you will be able to do it properly.
+
*** agent: Here you can specify the Jenkins agente where the pipeline will be executed. The default value is any.
*** options: Here you can set global options for the pipeline. By default, we add a build discarded to delete old artifacts/buils of the pipeline and also we disable the concurrent builds.
+
If the teams option is passed to cicdgen, we add a new option in order to send notifications to Microsoft Teams with the status of the pipeline executions.
+
*** tools: Here we define the global tools configurations. By default a version of nodejs is added here.
*** environment: Here all environment variables are defined. All values defined here matches with the Production Line defaults. If you Jenkins has other values, you need to update it manually.
*** stages: Here are defined all stages that our pipeline will execute. Those stages are:
**** Loading Custom Tools: in this stage some custom tools are loaded. Also we set some variables depending on the git branch which you are executing.
**** Fresh Dependency Installation: install all packages need to build/run your angular project.
**** Code Linting: execute the linter analysis.
**** Execute Angular tests: execute the angular test in a Chrome Headless.
**** SonarQube code analysis: send the project to SonarQube in order to get the static code analysis of your project.
**** Build Application: compile the application to be ready to deploy in a web server.
**** Deliver application into Nexus: store all compiled files in Nexus3 as a zip file.
[[jenkinsfile]]
**** If `--docker` is present:
***** Create the Docker image: build a new docker image that contains the new version of the project.
***** Deploy the new image: deploy a new version of the application using the image created in the previous stage. The previous version is removed.
**** If `--openshift` is present: 
***** Create the Docker image: build a new docker image that contains the new version of the project using a OpenShift build config.
***** Deploy the new image: deploy a new version of the application in OpenShift.
***** Check pod status: checks that the application deployed in the previous stage is running properly. If the application does not run the pipeline will fail.
*** post: actions that will be executed after the stages. We use it to clean up all files.